* Overview

Ahh, python, my favorite thing for everything small.

* Stdlib
** Argparse
The handy parser for CLI scirpts that need to be actual tools.

**BASIC USAGE**
#+BEGIN_SRC python
if __name__ == '__main__':
    p = argparse.ArgumentParser()
    p.add_argument('-s', '--long', help="Short or long flags", required=False)
    p.add_argument('-f', help='store_true indicates presence of a flag', action='store_true')
    p.add_argument('n', help='this is a pure positional argument')
    args = p.parse_args()
#+END_SRC

**SUB COMMANDS**
#+BEGIN_SRC python
def foo(args):
    if args.foo:
       print("I'm a subcommand")

def main(args):
    pass

if __name__ == '__main__':
    p = argparse.ArgumentParser()
    p.set_defaults(func=main)
    subparsers = p.add_subparsers()
    subcmd = subparsers.add_parser('subcommand')
    subcmd.add_argument('-f', '--foo', help="Some arg")
    subcmd.set_defaults(func=foo)

    # Parse, and then use. This dispatches to the specified defaults function
    args = p.parse_args()
    args.func(args)
#+END_SRC

* Functions I often want that aren't in the stdlib.

** Chunked Iterable
#+begin_src python
import itertools

def chunked_iterable(iterable, size):
    it = iter(iterable)
    while True:
        chunk = tuple(itertools.islice(it, size))
        if not chunk:
            break
        yield chunk
#+end_src

** Recursive {get,set}attr
https://stackoverflow.com/a/31174427

#+begin_src python
import functools

def rsetattr(obj, attr, val):
    pre, _, post = attr.rpartition('.')
    return setattr(rgetattr(obj, pre) if pre else obj, post, val)

def rgetattr(obj, attr, *args):
    def _getattr(obj, attr):
        return getattr(obj, attr, *args)
    return functools.reduce(_getattr, [obj] + attr.split('.'))
#+end_src
